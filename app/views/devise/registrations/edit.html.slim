/   Copyright (c) 2012-2017, Fairmondo eG.  This file is
/   licensed under the GNU Affero General Public License version 3 or later.
/   See the COPYRIGHT file for details.

= link_to t('devise.links.back_to_my_profile'), user_path(@user)
h1= t('common.actions.edit_profile')

.Accordion.Accordion--scrollToActive.user-edit
  = semantic_form_for(@user, html: {multipart: true, autocomplete: "off", class: 'js-visual-submit'}, as: resource_name, url: registration_path(resource_name), builder: ::Fairtastic::FormBuilder) do |f|
    = f.semantic_errors
    = f.input_step :account, default_step: true do

      .Accordion-step
        .visibility
          = t('users.visibility.public')
          span.sprite_helper title="Für Dich und andere Nutzer*innen sichtbar."
        h4
          = "#{ t('formtastic.labels.user.legal_entity') }:"
        p
          - if current_user.is_a?(LegalEntity) && !current_user.ngo
            = t('users.legal_status.edit.legal_entity')
          - elsif current_user.ngo
            = t('users.legal_status.edit.ngo')
          -else
            = t('users.legal_status.edit.private_user')

      .Accordion-step
        .visibility
          = t('users.visibility.public')
        h4
          = t('formtastic.labels.user.nickname') + ":"
        p
          = current_user.nickname
      .Accordion-step
        .visibility
          = t('users.visibility.private')
          span.sprite_helper title="Nur für Dich sichtbar."
        h4= t('formtastic.labels.user.customer_number') + ":"
        p
          = current_user.customer_nr
      .Accordion-step
        .visibility
          = t('users.visibility.public')
        h4= "#{ t('formtastic.labels.user.image')} : "
        p
          = image_tag(@user.image_url(:profile), class: "img-polaroid ")
          - f.object.build_image unless f.object.image # Build the Image object for the form
          = f.semantic_fields_for :image do |image|
            = f.inputs do
              = image.input :image, label: false, as: :file, tooltip: true, required: false

      .Accordion-step
        .visibility
          = current_user.is_a?(LegalEntity) ? t('users.visibility.public') : t('users.visibility.private')

        h3= t('users.title.login')
        = f.inputs do
          = f.input :email

      .Accordion-step
        = f.input :current_password
        = f.input :password,  label: t('users.change_password'), input_html: { autocomplete: "off"}, required: false
        = f.input :password_confirmation
        = render partial: '/devise/registrations/password_complexity'

      .Accordion-step
        .visibility
          = t('users.visibility.public')
        h3
          = t('users.title.state')
        = f.input :vacationing,as: :boolean, tooltip: true
        = f.input :newsletter, as: :boolean, tooltip: true
        = f.input :receive_comments_notification, tooltip: true

    - @user.standard_address ||= resource.addresses.build
    - @user.standard_address.valid?
    = f.input_step :contact, has_errors: @user.standard_address.errors.any? do
      = f.inputs do

        .Accordion-step
          - f.semantic_errors :standard_address
          .visibility
            = current_user.is_a?(LegalEntity) ? t('users.visibility.public') : t('users.visibility.private')

          - if current_user.is_a?(LegalEntity)
            h3= t('users.form_titles.contact_person')
          = semantic_fields_for @user.standard_address do |af|
            = af.inputs do
              = af.input :title, as: :select, collection: [t('common.title.woman'),t('common.title.man')]
              = af.input :first_name, required: true
              = af.input :last_name, required: true

        .Accordion-step
          .visibility
            = current_user.is_a?(LegalEntity) ? t('users.visibility.public') : t('users.visibility.private')

          h3= t('users.form_titles.address')

          / show map in address area
          = render 'addresses/map'

          = semantic_fields_for @user.standard_address do |af|
            = af.inputs do
              - if @user.is_a?(LegalEntity)
                = af.input :company_name
              = af.input :address_line_1, required: true
              = af.input :address_line_2
              = af.input :zip, required: true
              = af.input :city, required: true
              = af.input :country, required: true, as: :select, collection: [t('users.countries.germany')]
              = af.input :longitude, required: false, as: :hidden
              = af.input :latitude, required: false, as: :hidden
              = f.input :show_on_map, required: true, as: :boolean

          = f.input :phone
          = f.input :mobile
          = f.input :fax

        .Accordion-step
          .visibility
            = t('users.visibility.private')
          h3= t('.heading')

          = render 'addresses/addresses', radio: false
          = link_to 'neue Adresse hinzufügen', new_user_address_path(@user), { class: 'ungrouped_colorbox' }

    = f.input_step :profile, tooltip: true do
      = f.inputs do
        .Accordion-step
          .visibility
            = t('users.visibility.public')

          h4= "#{ t('formtastic.labels.user.about_me') }"

          = f.input :external_website, limit: 2000, label: t('formtastic.labels.user.external_website')
          / yes, 2k is the upper limit (https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers)
          = f.input :about_me, label:false, as: :text, limit: 2500,
            input_html: { class: 'tinymce' }
          = tinymce


    - if current_user.is_a?(LegalEntity)
      = render partial: '/devise/registrations/edit_legal', locals: {f: f}
      = render partial: '/devise/registrations/edit_alternative_emails', locals: { f: f }

    - if current_user.can_sell?
      = f.input_step :unified_transport do
        = f.inputs do
          .Accordion-step
            h3.unified_transport_title
              = t('users.title.unified_transport')
              span.sprite_helper title=t('users.hints.unified_transport')

            = f.input :unified_transport_provider, :input_html => { :placeholder => t('article.transport.placeholders.type2_provider') }
            = f.input :unified_transport_price
            = f.input :unified_transport_maximum_articles, wrapper_html: {class: "unified_transport_maximum_articles"}
            = t('users.unified_warning')

          .Accordion-step.free_transport_step
            h3.free_transport_title
              = t('users.title.free_at_transport')
              span.sprite_helper title=t('users.hints.free_at_transport')
            = f.input :free_transport_available, wrapper_html: {class: "free_transport_available"}
            = f.input :free_transport_at_price, wrapper_html: {class: "free_transport_at_price_cents"}

      = f.input_step :payment, tooltip: true do
        = f.inputs do
          .Accordion-step
            h3= t('users.form_titles.payment_bank_account')

            = f.input :bank_account_owner, required: true, label: t('formtastic.labels.user.bank_account_owner')
            = f.input :bank_name, input_html: {id: "bank_name"}, label: t('formtastic.labels.user.bank_name')
            = f.input :iban, required: true, input_html: {id: "iban"}, label: t('formtastic.labels.user.iban'), tooltip: true
            = f.input :bic, required: true, input_html: {id: "bic"}, label: t('formtastic.labels.user.bic'), tooltip: true

          / only LegalEntities will be billed for fees
          /- if resource.is_a?(LegalEntity)
            .Accordion-step
              - direct_debit_link = link_to t('formtastic.labels.user.sepa'), '/sepa?layout=false', target: '_blank', class: 'ungrouped_colorbox'
              - if resource.active_direct_debit_mandate.present?
                p= "#{t('formtastic.labels.user.active_direct_debit_mandate_reference')}: "\
                   "#{resource.active_direct_debit_mandate.to_s}"
              - else
                = f.input :direct_debit_confirmation, as: :boolean, required: true, label: t('formtastic.labels.user.direct_debit_confirmation_html').html_safe + direct_debit_link

          .Accordion-step
            h3= t('users.form_titles.payment_paypal')

            = f.input :paypal_account, label: t('formtastic.labels.user.paypal_account'), tooltip: true
            = f.input :fastbill_profile_update, as: :hidden, input_html: { value: true }
    = f.actions do
      = f.action :submit, button_html: {class: "Button"}

- content_for :view_specific_scripts do
  = javascript_include_tag 'inputs/bank_details'
  /= javascript_include_tag 'inputs/newsletter_status' / was needed when Cleverreach was used for newsletter dispatch
